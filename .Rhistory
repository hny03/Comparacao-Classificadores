))
df
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
df <- glass_df %>%
group_by(Class)%>%
count(n()) %>%
mutate(Class = recode(Class,
`1` = "Janelas de edifícios (float)",
`2` = "Janelas de edifícios (não-float)",
`3` = "Janelas de veículos (float)",
`4` = "Janelas de veículos (não-float)",   # não há amostras
`5` = "Recipientes",
`6` = "Utensílios de mesa",
`7` = "Faróis"
))
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
df
glass_df %>%
mutate()
group_by(Class)%>%
count(n())
glass_df %>%
mutate()
group_by(Class)%>%
count(n())
glass_df
unique(glass_df$Class)
ggplot(df, aes(, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
ggplot(df, aes(y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
ggplot(df, aes(x = Class, y = n)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
df <- bean_df %>%
group_by(Class)%>%
count(n())
library(readxl)
library(data.table)
library(ggplot2)
library(dplyr)
bean_df <- read_excel("Dry_Bean_Dataset.xlsx")
bean_df <- as.data.table(bean_df)   # se quiser table/dt
df <- bean_df %>%
group_by(Class)%>%
count(n())
library(ggplot2)
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Feijão",
x = "Classe",
y = "Frequência") +
theme_minimal()
print(colnames(bean_df))
bean <- bean_df %>%
filter(-c("MinorAxisLength", "MajorAxisLength", "Area", "Perimeter"))
bean <- bean_df %>%
select(-c("MinorAxisLength", "MajorAxisLength", "Area", "Perimeter"))
bean
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
teste <- min_max_normalization(bean_df$ConvexArea)
teste
print(max(bean_df$ConvexArea))
print(max(teste))
teste <- as.data.frame(min_max_normalization(bean_df$ConvexArea))
View(teste)
print(colnames(bean_df))
# Retirada das colunas fundamentais
bean_df <- bean_df %>%
select(-c("MinorAxisLength", "MajorAxisLength", "Area", "Perimeter"))
print(colnames(bean_df))
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
bean_df_norm <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "ConvexArea", "EquivalentDiameter", "Extent", "Solidity", "Roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
bean_df_norm <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "ConvexArea", "EquivDiameter", "Extent", "Solidity", "Roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
bean_df_norm <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "ConvexArea", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
View(bean_df_norm)
bean_df_norm %>%
select(
AspectRation,
Eccentricity,
ConvexArea,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
?sd
padronization_norm <- function(x){
return((x-mean(x))/sd(x))
}
# Aplicando normalização (padronização) nas colunas numéricas
bean_df_res <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "ConvexArea", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), padronization_norm))
# Aplicando normalização (padronização) nas colunas numéricas
bean_df_pad <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "ConvexArea", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), padronization_norm))
bean_df_pad %>%
select(
AspectRation,
Eccentricity,
ConvexArea,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
?select
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Aplicando normalização (re-escala) nas colunas numéricas
bean_df_res <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
bean_df_res %>%
select(
AspectRation,
Eccentricity,
ConvexArea,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
padronization_norm <- function(x){
return((x-mean(x))/sd(x))
}
# Aplicando normalização (padronização) nas colunas numéricas
bean_df_pad <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), padronization_norm))
bean_df_pad %>%
select(
AspectRation,
Eccentricity,
ConvexArea,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
bean_df <- read_excel("Dry_Bean_Dataset.xlsx")
bean_df <- as.data.table(bean_df)   # se quiser table/dt
# Retirada das colunas fundamentais
bean_df <- bean_df %>%
select(-c("MinorAxisLength", "MajorAxisLength", "Area", "Perimeter", "ConvexArea"))
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Aplicando normalização (re-escala) nas colunas numéricas
bean_df_res <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
bean_df_res %>%
select(
AspectRation,
Eccentricity,
ConvexArea,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Aplicando normalização (re-escala) nas colunas numéricas
bean_df_res <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
bean_df_res %>%
select(
AspectRation,
Eccentricity,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
padronization_norm <- function(x){
return((x-mean(x))/sd(x))
}
# Aplicando normalização (padronização) nas colunas numéricas
bean_df_pad <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), padronization_norm))
bean_df_pad %>%
select(
AspectRation,
Eccentricity,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
glass_df <- fread("glass.data", sep = ",", header = FALSE)
glass_df <- glass_df %>%
filter(-Id_number)
colnames(glass_df) <- c(
"Id",
"RI",  # V2
"Na",               # V3
"Mg",               # V4
"Al",               # V5
"Si",               # V6
"K",                # V7
"Ca",               # V8
"Ba",               # V9
"Fe",               # V10
"Class"             # V11
)
glass_df <- glass_df %>%
filter(-Id_number)
colnames(glass_df) <- c(
"Id_number",
"RI",  # V2
"Na",               # V3
"Mg",               # V4
"Al",               # V5
"Si",               # V6
"K",                # V7
"Ca",               # V8
"Ba",               # V9
"Fe",               # V10
"Class"             # V11
)
glass_df <- glass_df %>%
filter(-Id_number)
glass_df <- glass_df %>%
select(-Id_number)
padronization_norm <- function(x){
return((x-mean(x))/sd(x))
}
# Aplicando normalização (padronização) nas colunas numéricas
bean_df_pad <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), padronization_norm))
bean_df_pad %>%
select(
AspectRation,
Eccentricity,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
colnames(glass_df)
glass_df_res %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe")), min_max_normalization)
glass_df_res <- glass_df %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe")), min_max_normalization)
glass_df_res <- glass_df %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe"), min_max_normalization))
glass_df_res %>%
select(-class)
glass_df_res %>%
select(-Class)
glass_df_pad <- glass_df %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe"), padronization_norm))
glass_df_res %>%
select(-Class)
glass_df_pad <- glass_df %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe"), padronization_norm))
glass_df_pad %>%
select(-Class)
{r}
bean_df <- read_excel("Dry_Bean_Dataset.xlsx")
bean_df <- as.data.table(bean_df)   # se quiser table/dt
df <- bean_df %>%
group_by(Class)%>%
count(n())
library(ggplot2)
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Feijão",
x = "Classe",
y = "Frequência") +
theme_minimal()
glass_df <- fread("glass.data", sep = ",", header = FALSE)
colnames(glass_df) <- c(
"Id_number",
"RI",  # V2
"Na",               # V3
"Mg",               # V4
"Al",               # V5
"Si",               # V6
"K",                # V7
"Ca",               # V8
"Ba",               # V9
"Fe",               # V10
"Class"             # V11
)
df <- glass_df %>%
mutate()
group_by(Class)%>%
count(n()) %>%
mutate(Class = recode(Class,
`1` = "Janelas de edifícios (float)",
`2` = "Janelas de edifícios (não-float)",
`3` = "Janelas de veículos (float)",
`4` = "Janelas de veículos (não-float)",   # não há amostras
`5` = "Recipientes",
`6` = "Utensílios de mesa",
`7` = "Faróis"
))
glass_df
df <- glass_df %>%
mutate()
df <- glass_df %>%
mutate()
df <- glass_df %>%
group_by(Class)%>%
count(n()) %>%
mutate(Class = recode(Class,
`1` = "Janelas de edifícios (float)",
`2` = "Janelas de edifícios (não-float)",
`3` = "Janelas de veículos (float)",
`4` = "Janelas de veículos (não-float)",   # não há amostras
`5` = "Recipientes",
`6` = "Utensílios de mesa",
`7` = "Faróis"
))
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
df <- glass_df %>%
group_by(Class)%>%
count(n()) %>%
mutate(Class = recode(Class,
`1` = "Janelas de edifícios (float)",
`2` = "Janelas de edifícios (não-float)",
`3` = "Janelas de veículos (float)",
`4` = "Janelas de veículos (não-float)",   # não há amostras
`5` = "Recipientes",
`6` = "Utensílios de mesa",
`7` = "Faróis"
))
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
library(readxl)
library(data.table)
library(ggplot2)
library(dplyr)
library(ggplot2)
bean_df <- read_excel("Dry_Bean_Dataset.xlsx")
bean_df <- as.data.table(bean_df)   # se quiser table/dt
df <- bean_df %>%
group_by(Class)%>%
count(n())
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Feijão",
x = "Classe",
y = "Frequência") +
theme_minimal()
glass_df <- fread("glass.data", sep = ",", header = FALSE)
colnames(glass_df) <- c(
"Id_number",
"RI",  # V2
"Na",               # V3
"Mg",               # V4
"Al",               # V5
"Si",               # V6
"K",                # V7
"Ca",               # V8
"Ba",               # V9
"Fe",               # V10
"Class"             # V11
)
df <- glass_df %>%
group_by(Class)%>%
count(n()) %>%
mutate(Class = recode(Class,
`1` = "Janelas de edifícios (float)",
`2` = "Janelas de edifícios (não-float)",
`3` = "Janelas de veículos (float)",
`4` = "Janelas de veículos (não-float)",   # não há amostras
`5` = "Recipientes",
`6` = "Utensílios de mesa",
`7` = "Faróis"
))
ggplot(df, aes(x = Class, y = n, fill = Class)) +
geom_col() +
labs(title = "Distribuição das Classes de Vidro",
x = "Classe",
y = "Frequência") +
theme_minimal()
# Retirada das colunas fundamentais
bean_df <- bean_df %>%
select(-c("MinorAxisLength", "MajorAxisLength", "Area", "Perimeter", "ConvexArea"))
min_max_normalization <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Aplicando normalização (re-escala) nas colunas numéricas
bean_df_res <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), min_max_normalization))
bean_df_res %>%
select(
AspectRation,
Eccentricity,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
padronization_norm <- function(x){
return((x-mean(x))/sd(x))
}
# Aplicando normalização (padronização) nas colunas numéricas
bean_df_pad <- bean_df %>%
mutate(across(c("AspectRation", "Eccentricity", "EquivDiameter", "Extent", "Solidity", "roundness", "Compactness", "ShapeFactor1", "ShapeFactor2", "ShapeFactor3", "ShapeFactor4"), padronization_norm))
bean_df_pad %>%
select(
AspectRation,
Eccentricity,
EquivDiameter,
Extent,
Solidity,
roundness,
Compactness,
ShapeFactor1,
ShapeFactor2,
ShapeFactor3,
ShapeFactor4
)
glass_df <- glass_df %>%
select(-Id_number)
glass_df_res <- glass_df %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe"), min_max_normalization))
glass_df_res %>%
select(-Class)
glass_df_pad <- glass_df %>%
mutate(across(c("RI","Na","Mg","Al","Si","K","Ca","Ba","Fe"), padronization_norm))
glass_df_pad %>%
select(-Class)
